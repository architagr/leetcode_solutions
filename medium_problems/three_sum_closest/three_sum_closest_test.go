package three_sum_closest

import (
	"fmt"
	"reflect"
	"testing"
)

type TestCase struct {
	input    []int
	target   int
	expected int
}

var testCases []TestCase = []TestCase{
	{
		input:    []int{-1, 2, 4, -4},
		target:   1,
		expected: 2,
	},
	{
		input:    []int{0, 0, 0},
		target:   1,
		expected: 0,
	},
	{
		input:    []int{58, 241, -354, 103, 430, -113, 707, 951, -817, 372, 369, -610, 505, -411, 871, 101, 925, 899, -704, 411, 437, 996, 525, -845, -510, 235, -105, 590, 403, -777, -727, 625, 501, 242, -763, 478, -400, -214, -245, -609, -304, -818, -462, 416, 853, 564, -151, -750, 383, 702, 480, 132, -278, -82, -696, 728, -559, 148, -676, 535, -888, -22, 839, 641, -341, -766, 126, -954, -986, 776, 887, 941, 228, -83, -363, -131, -944, 813, -652, 960, -640, -937, -297, 219, 973, 838, -247, 337, 83, -212, 966, 470, -321, 247, -69, -375, 273, 883, 607, -412, 65, 436, -221, -114, -754, 704, -910, -157, 499, 591, -10, -20, -384, -534, -378, 997, 360, -762, -98, 313, -580, -656, -651, 377, -397, -689, 467, 204, 862, -274, 630, 555, 298, 174, 75, 939, -59, 745, 67, -132, -529, -338, 427, -263, -821, -548, -483, -512, -26, -398, -175, 315, 567, 872, 516, -604, 192, 730, -847, 664, -564, -381, -745, -641, -76, -195, 657, 37, -258, 733, 272, -29, 216, 698, -616, 982, 365, 534, 16, 55, -913, -605, -119, 627, -775, -391, -65, 716, 341, 884, 122, 426, -982, 230, 468, -791, -916, -68, 231, 857, -593, -973, -447, -880, 486, -835, -715, 622, -268, 680, 220, -104, 629, -664, -903, 869, 663, 115, 945, -314, 134, 852, -575, 602, -925, 309, 71, 727, -877, -323, -31, 325, 737, -500, -322, 545, 511, 138, -837, -225, 11, -155, -246, -335, -975, -337, 185, -152, -701, 173, -79, -405, -455, 814, -844, -976, 905, 508, -439, 886, 483, -826, 935, -187, -8, 946, -78, -357, 835, -201, -886, -181, 633, 975, -864, 576, -535, -527, -479, 858, 670, -985, -150, 20, -677, -647, 233, -612, 512, 465, -310, 570, 190, 32, -280, 476, -386, 953, 877, 705, -646, 370, 407, -349, 700, -884, -497, 30, -789, 890, -769, -87, -352, -111, -897, -596, -230, 64, -476, -895, 340, 527, -244, -924, 642, -581, -546, 800, 573, 510, 7, -449, 740, -136, -209, 684, 503, -37, -369, -243, 129, 184, -885, 615, 720, 569, -173, -861, 317, -943, -413, 620, -301, -127, -276, 270, 550, -392, -645, -520, 191, 6, -199, 57, 903, 91, -674, -503, -608, 481, 392, 201, 211, -484, 469, 594, 865, -493, -830, 73, 186, -270, -733, 963, -366, -744, -875, -380, 840, 929, -782, 51, -236, -557, -787, -773, 274, -956, -432, 93, -491, 694, 307, -117, 168, -959, -239, -100, -960, 513, -554, -217, -853, -253, -783, -525, -933, 597, 915, 672, -815, -422, 15, 119, -873, 355, -417, 524, 529, -128, -568, 413, 24, -995, -34, -16, 665, 977, -488, -227, -300, 135, -556, 958, 124, -856, 732, 48, 611, 153, 422, -809, -347, -642, 806, 926, 502, -923, -591, 33, -452, 239, 414, -250, -860, -620, 179, -732, -401, -81, -7, 442, -229, 851, -249, 41, 423, 896, 986, -538, 141, -804, 553, -305, -425, 113, 754, 558, 23, 864, 495, 266, 294, 408, 817, -561, -435, -957, 246, -614, -379, -859, 626, -148, -823, 157, -626, 425, -519, 653, 542, -811, 158, -606, 197, 250, 759, 35, 229, -539, -920, -607, -558, -685, -654, 770, -962, -942, -112, 974, 348, -908, 471, -324, -904, 552, 518, 795, 609, -990, -781, 395, -92, 794, 821, -86, -440, -107, -431, 631, -714, 619, 546, -749, -881, -343, -130, 251, -849, 31, 351, -188, -419, -407, -662, -256, -760, 559, -870, 781, -862, 42, 114, -879, -839, 708, -220, 916, -526, -252, -764, 923, 405, -61, -751, 143, -499, 914, -182, -317, 971, 78, -118, 38, 375, -989, -388, -480, 384, 891, -40, 300, 209, 989, 729, -915, -145, -25, -792, -382, 824, 544, -905, 362, -578, 964, 446, 815, 402, -312, -350, -58, -978, 575, 379, 662, -293, -688, 328, -416, 1000, -731, -237, 736, -848, 539, -983, -5, 441, -663, 724, -251, -583, 922, 378, -228, 532, 194, -472, 336, 638, 942, -528, 195, -788, -757, -326, -272, 574, -778, 718, -963, -73, -174, 603, -475, 353, -793, -753, 128, -158, 568, -333, 893, 293, -50, -711, 350, 957, -200, 389, 757, 330, -141, 780, 650, -6, -767, -824, 107, -882, -698, -998, -636, -974, -106, -84, -281, 669, -42, -121, -725, -345, -863, 261, 240, 696, -428, -724, 118, -1, 269, 473, 985, 187, -988, -883, -532, -303, -502, 181, -517, 288, 832, -728, -633, 616, -643, -33, 373, 387, 981, 260, 752, -705, 109, -21, -690, 334, -638, 415, -595, -673, -444, -660, 673, -404, 80, -573, 731, 311, 343, 424, 722, 976, 189, 885, -909, -737, 404, -765, 299, 940, -441, 310, -437, -160, -639, 855, 489, 819, -142, 177, 651, 281, -468, 398, 528, -460, 374, -508, -570, -511, 654, -621, -600, -137, 434, 453, 13, 207, 45, 253, -410, 682, -509, 920, -490, -912, -408, 477, -257, -746, -628, -180, 322, -394, 606, 906, 92, -820, -968, -865, 526, -552, -756, 87, -670, -669, 691, -679, -358, -232, 276, -259, -544, 283, 479, 797, 579, 848, -695, 747, 120, 316, 491, -935, -4, -190},
		target:   6456,
		expected: 2993,
	},
	{
		input:    []int{4, 0, 5, -5, 3, 3, 0, -4, -5},
		target:   -2,
		expected: -2,
	},
}

func TestThreeSumClosest(t *testing.T) {
	for i, testCase := range testCases {
		t.Run(fmt.Sprintf("testing number %d", (i+1)), func(test *testing.T) {
			got := ThreeSumClosest(testCase.input, testCase.target)
			if !reflect.DeepEqual(got, testCase.expected) {
				test.Fatalf("tested %d expected %+v but got %+v", (i + 1), testCase.expected, got)
			}
		})
	}
}
